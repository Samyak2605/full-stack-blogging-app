pipeline {
    agent any
    
    tools {
        jdk "jdk"
        maven "maven"
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        // Update these variables for your environment
        DOCKERHUB_USERNAME = 'your-dockerhub-username'
        IMAGE_NAME = 'blog-app'
        SONARQUBE_SERVER = 'sonarqubeServer'
        EMAIL_RECIPIENT = 'your-email@example.com'
        CLUSTER_NAME = 'devopsshack-cluster'
        CLUSTER_REGION = 'eu-west-2'
        NAMESPACE = 'webapps'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/your-username/your-repo.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
            post {
                always {
                    publishTestResults(
                        testResultsPattern: 'target/surefire-reports/*.xml'
                    )
                }
            }
        }
        
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs . --format table -o fs-report.html"
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'fs-report.html',
                    reportName: 'Trivy FS Security Report'
                ])
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.projectName=Blogging-app \
                          -Dsonar.projectKey=Blogging-app \
                          -Dsonar.java.binaries=target/classes'''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        
        stage('Build Package') {
            steps {
                sh "mvn package -DskipTests"
            }
        }
        
        stage('Publish Artifacts') {
            steps {
                withMaven(
                    globalMavenSettingsConfig: 'maven-settings',
                    jdk: 'jdk',
                    maven: 'maven',
                    traceability: true
                ) {
                    sh "mvn deploy -DskipTests"
                }
            }
        }
        
        stage('Docker Build & Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub-cred', url: 'https://index.docker.io/v1/') {
                        sh """
                            docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER} .
                            docker tag ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                sh """
                    trivy image --format table -o image-report.html ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                """
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'image-report.html',
                    reportName: 'Trivy Image Security Report'
                ])
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub-cred', url: 'https://index.docker.io/v1/') {
                        sh """
                            docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}
                            docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Update Deployment') {
            steps {
                script {
                    // Update the deployment file with the new image tag
                    sh """
                        sed -i 's|image: .*|image: ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}|g' deployment-service.yml
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withKubeCredentials(kubectlCredentials: [[
                    caCertificate: '',
                    clusterName: CLUSTER_NAME,
                    contextName: '',
                    credentialsId: 'k8s-token',
                    namespace: NAMESPACE,
                    serverUrl: ''
                ]]) {
                    sh """
                        kubectl apply -f deployment-service.yml -n ${NAMESPACE}
                        kubectl rollout status deployment/bloggingapp-deployment -n ${NAMESPACE}
                        sleep 10
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeCredentials(kubectlCredentials: [[
                    caCertificate: '',
                    clusterName: CLUSTER_NAME,
                    contextName: '',
                    credentialsId: 'k8s-token',
                    namespace: NAMESPACE,
                    serverUrl: ''
                ]]) {
                    sh """
                        echo "Checking deployment status..."
                        kubectl get deployments -n ${NAMESPACE}
                        kubectl get pods -n ${NAMESPACE}
                        kubectl get services -n ${NAMESPACE}
                        
                        echo "Getting application URL..."
                        kubectl get service bloggingapp-ssvc -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                
                def body = """
                <html>
                <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px; margin: 10px;">
                        <h2 style="color: ${bannerColor};">Pipeline ${pipelineStatus.toUpperCase()}</h2>
                        <h3>Job Details:</h3>
                        <ul>
                            <li><strong>Job Name:</strong> ${jobName}</li>
                            <li><strong>Build Number:</strong> ${buildNumber}</li>
                            <li><strong>Status:</strong> ${pipelineStatus.toUpperCase()}</li>
                            <li><strong>Build URL:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></li>
                        </ul>
                        <h3>Pipeline Stages:</h3>
                        <p>All stages have been executed. Check the Jenkins console for detailed logs.</p>
                    </div>
                </body>
                </html>
                """
                
                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: EMAIL_RECIPIENT,
                    from: 'jenkins@company.com',
                    replyTo: 'jenkins@company.com',
                    mimeType: 'text/html',
                    attachmentsPattern: '*-report.html'
                )
            }
            
            // Clean up workspace
            cleanWs()
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        
        failure {
            echo 'Pipeline failed!'
        }
        
        unstable {
            echo 'Pipeline completed with warnings!'
        }
    }
}
